{"version":3,"file":"AbstractLogger.js","sources":["../../src/types/LogLevels.ts","../../src/shared/AbstractLogger.ts"],"sourcesContent":["export const DEBUG = 0;\nexport const INFO = 1;\nexport const LOG = 2;\nexport const WARN = 3;\nexport const ERROR = 4;\nexport const GROUP = 5;\nexport const SILENCE = 6;\nexport type LogLevel = 0 | 1 | 2 | 3 | 4 | 5 | 6;\n","import * as LogLevels from '../types/LogLevels';\n\nexport type LoggerOpts = {\n  prefix?: string;\n};\n\nexport abstract class AbstractLogger {\n  private opts: LoggerOpts;\n  private currentLogLevel: LogLevels.LogLevel;\n\n  constructor(opts?: LoggerOpts) {\n    this.opts = opts || {};\n    this.currentLogLevel = this.getDefaultLogLevel();\n  }\n\n  setPrefix(prefix: string) {\n    this.opts.prefix = prefix;\n  }\n\n  setLogLevel(logLevel: LogLevels.LogLevel) {\n    this.currentLogLevel = logLevel;\n  }\n\n  // tslint:disable-next-line:no-any\n  debug(...args: any[]) {\n    this.print(console.debug, LogLevels.DEBUG, args);\n  }\n\n  // tslint:disable-next-line:no-any\n  info(...args: any[]) {\n    this.print(console.info, LogLevels.INFO, args);\n  }\n\n  // tslint:disable-next-line:no-any\n  log(...args: any[]) {\n    this.print(console.log, LogLevels.LOG, args);\n  }\n\n  // tslint:disable-next-line:no-any\n  warn(...args: any[]) {\n    this.print(console.warn, LogLevels.WARN, args);\n  }\n\n  // tslint:disable-next-line:no-any\n  error(...args: any[]) {\n    this.print(console.error, LogLevels.ERROR, args);\n  }\n\n  // tslint:disable-next-line:no-any\n  group(...args: any[]) {\n    this.print(console.group, LogLevels.GROUP, args);\n  }\n\n  // tslint:disable-next-line:no-any\n  groupCollapsed(...args: any[]) {\n    this.print(console.groupCollapsed, LogLevels.GROUP, args);\n  }\n\n  groupEnd() {\n    console.groupEnd();\n  }\n\n  // tslint:disable-next-line:no-any\n  private print(consoleFunc: Function, logLevel: LogLevels.LogLevel, args: any[]) {\n    if (this.currentLogLevel > logLevel) {\n      return;\n    }\n\n    consoleFunc(...this.getArgs(logLevel, args));\n  }\n\n  // tslint:disable-next-line:no-any\n  private getArgs(logLevel: LogLevels.LogLevel, args: any[]): any[] {\n    const prefix = this.getPrefix(logLevel);\n    if (prefix) {\n      return [...prefix, ...args];\n    }\n    return args;\n  }\n\n  private getPrefix(logLevel: LogLevels.LogLevel): string[]|void {\n    if (this.opts.prefix) {\n      return this.colorPrefix(logLevel, this.opts.prefix);\n    }\n  }\n\n  protected getDefaultLogLevel(): LogLevels.LogLevel {\n    return LogLevels.DEBUG;\n  }\n\n  protected abstract colorPrefix(level: LogLevels.LogLevel, prefix: string): string[];\n}\n"],"names":["DEBUG","INFO","LOG","WARN","ERROR","GROUP","[object Object]","opts","this","currentLogLevel","getDefaultLogLevel","prefix","logLevel","args","print","console","debug","LogLevels.DEBUG","info","LogLevels.INFO","log","LogLevels.LOG","warn","LogLevels.WARN","error","LogLevels.ERROR","group","LogLevels.GROUP","groupCollapsed","groupEnd","consoleFunc","getArgs","getPrefix","colorPrefix"],"mappings":"mCAAO,MAAMA,EAAQ,EACRC,EAAO,EACPC,EAAM,EACNC,EAAO,EACPC,EAAQ,EACRC,EAAQ,gCCKnBC,YAAYC,GACVC,KAAKD,KAAOA,GAAQ,GACpBC,KAAKC,gBAAkBD,KAAKE,qBAG9BJ,UAAUK,GACRH,KAAKD,KAAKI,OAASA,EAGrBL,YAAYM,GACVJ,KAAKC,gBAAkBG,EAIzBN,SAASO,GACPL,KAAKM,MAAMC,QAAQC,MAAOC,EAAiBJ,GAI7CP,QAAQO,GACNL,KAAKM,MAAMC,QAAQG,KAAMC,EAAgBN,GAI3CP,OAAOO,GACLL,KAAKM,MAAMC,QAAQK,IAAKC,EAAeR,GAIzCP,QAAQO,GACNL,KAAKM,MAAMC,QAAQO,KAAMC,EAAgBV,GAI3CP,SAASO,GACPL,KAAKM,MAAMC,QAAQS,MAAOC,EAAiBZ,GAI7CP,SAASO,GACPL,KAAKM,MAAMC,QAAQW,MAAOC,EAAiBd,GAI7CP,kBAAkBO,GAChBL,KAAKM,MAAMC,QAAQa,eAAgBD,EAAiBd,GAGtDP,WACES,QAAQc,WAIFvB,MAAMwB,EAAuBlB,EAA8BC,GAC7DL,KAAKC,gBAAkBG,GAI3BkB,KAAetB,KAAKuB,QAAQnB,EAAUC,IAIhCP,QAAQM,EAA8BC,GAC5C,MAAMF,EAASH,KAAKwB,UAAUpB,GAC9B,OAAID,EACK,IAAIA,KAAWE,GAEjBA,EAGDP,UAAUM,GAChB,GAAIJ,KAAKD,KAAKI,OACZ,OAAOH,KAAKyB,YAAYrB,EAAUJ,KAAKD,KAAKI,QAItCL,qBACR,OAAOW"}